// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL") // uses connection pooling
    directUrl         = env("DATABASE_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("DATABASE_URL_NON_POOLING") // used for migrations
}

model Favroite {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    // all movie
    movie_id  Int
}

model Form {
    id          String           @id @default(cuid())
    createdAt   DateTime         @default(now())
    user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    title       String
    description String           @db.Text
    questions   Question[]
    submissions FormSubmission[]
}

enum QuestionType {
    MULTIPLE_CHOICE
    TEXT
    CHECKBOX
}

model Question {
    id          String       @id @default(cuid())
    text        String
    order       Int
    description String?      @db.Text
    type        QuestionType @default(MULTIPLE_CHOICE)
    formId      String
    form        Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
    options     Option[]
    responses   Response[]
}

model Option {
    id         String     @id @default(cuid())
    text       String
    order      Int
    questionId String
    question   Question   @relation(fields: [questionId], references: [id])
    responses  Response[]
}

model Response {
    id           String         @id @default(cuid())
    text         String
    optionId     String?
    option       Option?        @relation(fields: [optionId], references: [id])
    questionId   String
    question     Question       @relation(fields: [questionId], references: [id])
    submissionId String
    submission   FormSubmission @relation(fields: [submissionId], references: [id])
}

model FormSubmission {
    id        String     @id @default(cuid())
    formId    String
    form      Form       @relation(fields: [formId], references: [id])
    responses Response[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    password      String?
    // app specific fields
    favroites     Favroite[]
    forms         Form[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
